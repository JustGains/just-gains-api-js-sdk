/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Equipment, equipmentSchema } from '../models/equipment';
import {
  EquipmentResponse,
  equipmentResponseSchema,
} from '../models/equipmentResponse';
import {
  EquipmentResponse1,
  equipmentResponse1Schema,
} from '../models/equipmentResponse1';
import {
  EquipmentResponse4,
  equipmentResponse4Schema,
} from '../models/equipmentResponse4';
import {
  EquipmentTranslation,
  equipmentTranslationSchema,
} from '../models/equipmentTranslation';
import {
  EquipmentTranslationsResponse,
  equipmentTranslationsResponseSchema,
} from '../models/equipmentTranslationsResponse';
import {
  EquipmentTranslationsResponse1,
  equipmentTranslationsResponse1Schema,
} from '../models/equipmentTranslationsResponse1';
import { optional, string } from '../schema';
import { BaseController } from './baseController';
import { Equipment400Error } from '../errors/equipment400Error';
import { Equipment404Error } from '../errors/equipment404Error';
import { Equipment409Error } from '../errors/equipment409Error';
import { EquipmentTranslations400Error } from '../errors/equipmentTranslations400Error';
import { EquipmentTranslations404Error } from '../errors/equipmentTranslations404Error';

export class EquipmentController extends BaseController {
  /**
   * @param localeCode The locale to use for the localized equipment names.
   * @return Response from the API call
   */
  async getEquipments(
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentResponse>> {
    const req = this.createRequest('GET', '/equipment');
    const mapped = req.prepareArgs({
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.authenticate(false);
    return req.callAsJson(equipmentResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createEquipment(
    body: Equipment,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentResponse1>> {
    const req = this.createRequest('POST', '/equipment');
    const mapped = req.prepareArgs({ body: [body, equipmentSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, Equipment400Error, 'Invalid request data.');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(equipmentResponse1Schema, requestOptions);
  }

  /**
   * @param equipmentCode The unique code identifying the equipment.
   * @param localeCode    The locale to use for the localized equipment names.
   * @return Response from the API call
   */
  async getEquipment(
    equipmentCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      equipmentCode: [equipmentCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/equipment/${mapped.equipmentCode}`;
    req.throwOn(
      404,
      Equipment404Error,
      'Equipment not found with the given code.'
    );
    req.authenticate(false);
    return req.callAsJson(equipmentResponse1Schema, requestOptions);
  }

  /**
   * @param equipmentCode The unique code identifying the equipment to update.
   * @param body
   * @return Response from the API call
   */
  async updateEquipment(
    equipmentCode: string,
    body: Equipment,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      equipmentCode: [equipmentCode, string()],
      body: [body, equipmentSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/equipment/${mapped.equipmentCode}`;
    req.throwOn(400, Equipment400Error, 'Bad request. Invalid input data.');
    req.throwOn(
      404,
      Equipment404Error,
      'Equipment not found with the given code.'
    );
    req.throwOn(
      409,
      Equipment409Error,
      'Conflict. The equipment code already exists for a different equipment.'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(equipmentResponse1Schema, requestOptions);
  }

  /**
   * @param equipmentCode The unique code identifying the equipment to delete.
   * @return Response from the API call
   */
  async deleteEquipment(
    equipmentCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      equipmentCode: [equipmentCode, string()],
    });
    req.appendTemplatePath`/equipment/${mapped.equipmentCode}`;
    req.throwOn(
      400,
      Equipment400Error,
      'Failed to delete the equipment or equipment does not exist.'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(equipmentResponse4Schema, requestOptions);
  }

  /**
   * @param equipmentCode The unique code of the equipment
   * @return Response from the API call
   */
  async getEquipmentTranslations(
    equipmentCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentTranslationsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      equipmentCode: [equipmentCode, string()],
    });
    req.appendTemplatePath`/equipment/${mapped.equipmentCode}/translations`;
    req.throwOn(400, EquipmentTranslations400Error, 'Bad request');
    req.throwOn(404, EquipmentTranslations404Error, 'Equipment not found');
    req.authenticate(false);
    return req.callAsJson(equipmentTranslationsResponseSchema, requestOptions);
  }

  /**
   * @param equipmentCode The unique code of the equipment
   * @param body
   * @return Response from the API call
   */
  async updateEquipmentTranslations(
    equipmentCode: string,
    body: EquipmentTranslation,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentTranslationsResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      equipmentCode: [equipmentCode, string()],
      body: [body, equipmentTranslationSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/equipment/${mapped.equipmentCode}/translations`;
    req.throwOn(400, EquipmentTranslations400Error, 'Bad request');
    req.throwOn(404, EquipmentTranslations404Error, 'Equipment not found');
    req.authenticate(false);
    return req.callAsJson(equipmentTranslationsResponse1Schema, requestOptions);
  }
}
