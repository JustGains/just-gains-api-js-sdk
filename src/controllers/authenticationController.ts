/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AuthCallbackResponse,
  authCallbackResponseSchema,
} from '../models/authCallbackResponse';
import {
  AuthInitiateResponse,
  authInitiateResponseSchema,
} from '../models/authInitiateResponse';
import {
  AuthRefreshTokenResponse,
  authRefreshTokenResponseSchema,
} from '../models/authRefreshTokenResponse';
import {
  AuthSettingsResponse,
  authSettingsResponseSchema,
} from '../models/authSettingsResponse';
import {
  AuthSigninResponse,
  authSigninResponseSchema,
} from '../models/authSigninResponse';
import {
  ConfirmEmailRequest,
  confirmEmailRequestSchema,
} from '../models/confirmEmailRequest';
import {
  ForgotPasswordRequest,
  forgotPasswordRequestSchema,
} from '../models/forgotPasswordRequest';
import {
  InitiateAuthRequest,
  initiateAuthRequestSchema,
} from '../models/initiateAuthRequest';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import {
  ResetPasswordRequest,
  resetPasswordRequestSchema,
} from '../models/resetPasswordRequest';
import {
  UpdateUserRequest,
  updateUserRequestSchema,
} from '../models/updateUserRequest';
import {
  UserLoginRequest,
  userLoginRequestSchema,
} from '../models/userLoginRequest';
import {
  UserRegisterRequest,
  userRegisterRequestSchema,
} from '../models/userRegisterRequest';
import { UserResponse, userResponseSchema } from '../models/userResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class AuthenticationController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getUserInfo(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('GET', '/auth/user');
    req.throwOn(
      401,
      JustGainsErrorResponseError,
      'Failed to retrieve user information'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async updateUserInfo(
    body: UpdateUserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('PUT', '/auth/user');
    const mapped = req.prepareArgs({ body: [body, updateUserRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to update user information'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async registerUser(
    body: UserRegisterRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('POST', '/auth/signup');
    const mapped = req.prepareArgs({ body: [body, userRegisterRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid parameters');
    req.authenticate([]);
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async loginUser(
    body: UserLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthSigninResponse>> {
    const req = this.createRequest('POST', '/auth/signin');
    const mapped = req.prepareArgs({ body: [body, userLoginRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid credentials');
    req.authenticate([]);
    return req.callAsJson(authSigninResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async resendConfirmationEmail(
    body: ConfirmEmailRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/auth/resend-confirmation-email');
    const mapped = req.prepareArgs({ body: [body, confirmEmailRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to send confirmation email'
    );
    req.authenticate([]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async forgotPassword(
    body: ForgotPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('POST', '/auth/forgot-password');
    const mapped = req.prepareArgs({
      body: [body, forgotPasswordRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Failed to send password reset email'
    );
    req.authenticate([]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async resetPassword(
    body: ResetPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/auth/reset-password');
    const mapped = req.prepareArgs({
      body: [body, resetPasswordRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Failed to reset password');
    req.authenticate([]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async refreshToken(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthRefreshTokenResponse>> {
    const req = this.createRequest('POST', '/auth/refresh-token');
    req.throwOn(400, JustGainsErrorResponseError, 'Failed to refresh token');
    req.authenticate([]);
    return req.callAsJson(authRefreshTokenResponseSchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async signout(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/auth/signout');
    req.throwOn(400, JustGainsErrorResponseError, 'Failed to sign out user');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param provider     OAuth provider name (e.g., 'google', 'facebook')
   * @param body
   * @return Response from the API call
   */
  async initiateAuth(
    provider: string,
    body: InitiateAuthRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthInitiateResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      provider: [provider, string()],
      body: [body, initiateAuthRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/auth/${mapped.provider}/initiate`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to initiate OAuth flow'
    );
    req.authenticate([]);
    return req.callAsJson(authInitiateResponseSchema, requestOptions);
  }

  /**
   * @param provider         OAuth provider name (e.g., 'google', 'facebook')
   * @param code             Authorization code from OAuth provider
   * @param error            Error code from OAuth provider
   * @param errorDescription Detailed error description from OAuth provider
   * @return Response from the API call
   */
  async handleCallback(
    provider: string,
    code: string,
    error?: string,
    errorDescription?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthCallbackResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      provider: [provider, string()],
      code: [code, string()],
      error: [error, optional(string())],
      errorDescription: [errorDescription, optional(string())],
    });
    req.query('code', mapped.code);
    req.query('error', mapped.error);
    req.query('errorDescription', mapped.errorDescription);
    req.appendTemplatePath`/auth/${mapped.provider}/callback`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to handle OAuth callback'
    );
    req.authenticate([]);
    return req.callAsJson(authCallbackResponseSchema, requestOptions);
  }

  /**
   * @param provider OAuth provider name (e.g., 'google', 'facebook')
   * @return Response from the API call
   */
  async getSettings(
    provider: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthSettingsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ provider: [provider, string()] });
    req.appendTemplatePath`/auth/${mapped.provider}/settings`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to retrieve OAuth provider settings'
    );
    req.authenticate([]);
    return req.callAsJson(authSettingsResponseSchema, requestOptions);
  }
}
