/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AuthUserResponse,
  authUserResponseSchema,
} from '../models/authUserResponse';
import {
  AuthUserResponse1,
  authUserResponse1Schema,
} from '../models/authUserResponse1';
import {
  UpdateUserRequest,
  updateUserRequestSchema,
} from '../models/updateUserRequest';
import { BaseController } from './baseController';
import { AuthUser400Error } from '../errors/authUser400Error';

export class UserManagementController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getCurrentUserInformation(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthUserResponse>> {
    const req = this.createRequest('GET', '/auth/user');
    req.throwOn(400, AuthUser400Error, 'Failed to retrieve user information');
    req.authenticate([]);
    return req.callAsJson(authUserResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async updateUserInformation(
    body: UpdateUserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthUserResponse1>> {
    const req = this.createRequest('PUT', '/auth/user');
    const mapped = req.prepareArgs({ body: [body, updateUserRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, AuthUser400Error, 'Failed to update user information');
    req.authenticate([]);
    return req.callAsJson(authUserResponse1Schema, requestOptions);
  }
}
