/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import {
  UpdateUserRequest,
  updateUserRequestSchema,
} from '../models/updateUserRequest';
import { UserResponse, userResponseSchema } from '../models/userResponse';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class UserManagementController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getCurrentUserInformation(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('GET', '/auth/user');
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to retrieve user information'
    );
    req.authenticate([]);
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async updateUserInformation(
    body: UpdateUserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('PUT', '/auth/user');
    const mapped = req.prepareArgs({ body: [body, updateUserRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to update user information'
    );
    req.authenticate([]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }
}
