/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ExerciseType, exerciseTypeSchema } from '../models/exerciseType';
import {
  ExerciseTypeListResponse,
  exerciseTypeListResponseSchema,
} from '../models/exerciseTypeListResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import { string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class ExerciseTypesController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getExerciseTypes(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseTypeListResponse>> {
    const req = this.createRequest('GET', '/exercise-types');
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(exerciseTypeListResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewExerciseType(
    body: ExerciseType,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('POST', '/exercise-types');
    const mapped = req.prepareArgs({ body: [body, exerciseTypeSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }

  /**
   * @param exerciseTypeCode
   * @param body
   * @return Response from the API call
   */
  async updateAnExerciseType(
    exerciseTypeCode: string,
    body: ExerciseType,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      exerciseTypeCode: [exerciseTypeCode, string()],
      body: [body, exerciseTypeSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercise-types/${mapped.exerciseTypeCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise type not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }

  /**
   * @param exerciseTypeCode
   * @return Response from the API call
   */
  async deleteAnExerciseType(
    exerciseTypeCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      exerciseTypeCode: [exerciseTypeCode, string()],
    });
    req.appendTemplatePath`/exercise-types/${mapped.exerciseTypeCode}`;
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise type not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }
}
