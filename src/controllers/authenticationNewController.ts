/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { AuthResponse, authResponseSchema } from '../models/authResponse';
import {
  ConfirmEmailRequest,
  confirmEmailRequestSchema,
} from '../models/confirmEmailRequest';
import {
  ForgotPasswordRequest,
  forgotPasswordRequestSchema,
} from '../models/forgotPasswordRequest';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import {
  ResetPasswordRequest,
  resetPasswordRequestSchema,
} from '../models/resetPasswordRequest';
import {
  UserInfoResponse,
  userInfoResponseSchema,
} from '../models/userInfoResponse';
import {
  UserLoginRequest,
  userLoginRequestSchema,
} from '../models/userLoginRequest';
import {
  UserRegisterRequest,
  userRegisterRequestSchema,
} from '../models/userRegisterRequest';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class AuthenticationNewController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async registerANewUser(
    body: UserRegisterRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserInfoResponse>> {
    const req = this.createRequest('POST', '/auth/signup');
    const mapped = req.prepareArgs({ body: [body, userRegisterRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid parameters');
    req.authenticate([]);
    return req.callAsJson(userInfoResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async signInAUser(
    body: UserLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthResponse>> {
    const req = this.createRequest('POST', '/auth/signin');
    const mapped = req.prepareArgs({ body: [body, userLoginRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid credentials');
    req.authenticate([]);
    return req.callAsJson(authResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async resendConfirmationEmail(
    body: ConfirmEmailRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/auth/resend-confirmation-email');
    const mapped = req.prepareArgs({ body: [body, confirmEmailRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to send confirmation email'
    );
    req.authenticate([]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async initiateForgotPasswordProcess(
    body: ForgotPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('POST', '/auth/forgot-password');
    const mapped = req.prepareArgs({
      body: [body, forgotPasswordRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Failed to send password reset email'
    );
    req.authenticate([]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async resetUserPassword(
    body: ResetPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/auth/reset-password');
    const mapped = req.prepareArgs({
      body: [body, resetPasswordRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Failed to reset password');
    req.authenticate([]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async refreshAuthenticationToken(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthResponse>> {
    const req = this.createRequest('POST', '/auth/refresh-token');
    req.throwOn(400, JustGainsErrorResponseError, 'Failed to refresh token');
    req.authenticate([]);
    return req.callAsJson(authResponseSchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async signOutTheCurrentUser(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/auth/signout');
    req.throwOn(400, JustGainsErrorResponseError, 'Failed to sign out user');
    req.authenticate([]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }
}
