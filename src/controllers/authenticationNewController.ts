/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AuthForgotPasswordResponse,
  authForgotPasswordResponseSchema,
} from '../models/authForgotPasswordResponse';
import {
  AuthRefreshTokenResponse,
  authRefreshTokenResponseSchema,
} from '../models/authRefreshTokenResponse';
import {
  AuthResendConfirmationEmailResponse,
  authResendConfirmationEmailResponseSchema,
} from '../models/authResendConfirmationEmailResponse';
import {
  AuthResetPasswordResponse,
  authResetPasswordResponseSchema,
} from '../models/authResetPasswordResponse';
import {
  AuthSigninResponse,
  authSigninResponseSchema,
} from '../models/authSigninResponse';
import {
  AuthSignupResponse,
  authSignupResponseSchema,
} from '../models/authSignupResponse';
import {
  ConfirmEmailRequest,
  confirmEmailRequestSchema,
} from '../models/confirmEmailRequest';
import {
  ForgotPasswordRequest,
  forgotPasswordRequestSchema,
} from '../models/forgotPasswordRequest';
import {
  JustGainsDefaultResponse,
  justGainsDefaultResponseSchema,
} from '../models/justGainsDefaultResponse';
import {
  ResetPasswordRequest,
  resetPasswordRequestSchema,
} from '../models/resetPasswordRequest';
import {
  UserLoginRequest,
  userLoginRequestSchema,
} from '../models/userLoginRequest';
import {
  UserRegisterRequest,
  userRegisterRequestSchema,
} from '../models/userRegisterRequest';
import { BaseController } from './baseController';
import { AuthResendConfirmationEmail400Error } from '../errors/authResendConfirmationEmail400Error';
import { AuthResetPassword400Error } from '../errors/authResetPassword400Error';
import { AuthSignin400Error } from '../errors/authSignin400Error';
import { AuthSignup400Error } from '../errors/authSignup400Error';

export class AuthenticationNewController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async registerANewUser(
    body: UserRegisterRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthSignupResponse>> {
    const req = this.createRequest('POST', '/auth/signup');
    const mapped = req.prepareArgs({ body: [body, userRegisterRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, AuthSignup400Error, 'Invalid parameters');
    req.authenticate([]);
    return req.callAsJson(authSignupResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async signInAUser(
    body: UserLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthSigninResponse>> {
    const req = this.createRequest('POST', '/auth/signin');
    const mapped = req.prepareArgs({ body: [body, userLoginRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, AuthSignin400Error, 'Invalid credentials');
    req.authenticate([]);
    return req.callAsJson(authSigninResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async resendConfirmationEmail(
    body: ConfirmEmailRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthResendConfirmationEmailResponse>> {
    const req = this.createRequest('POST', '/auth/resend-confirmation-email');
    const mapped = req.prepareArgs({ body: [body, confirmEmailRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(
      400,
      AuthResendConfirmationEmail400Error,
      'Failed to send confirmation email'
    );
    req.authenticate(false);
    return req.callAsJson(
      authResendConfirmationEmailResponseSchema,
      requestOptions
    );
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async initiateForgotPasswordProcess(
    body: ForgotPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthForgotPasswordResponse>> {
    const req = this.createRequest('POST', '/auth/forgot-password');
    const mapped = req.prepareArgs({
      body: [body, forgotPasswordRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.callAsJson(authForgotPasswordResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async resetUserPassword(
    body: ResetPasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthResetPasswordResponse>> {
    const req = this.createRequest('POST', '/auth/reset-password');
    const mapped = req.prepareArgs({
      body: [body, resetPasswordRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, AuthResetPassword400Error, 'Failed to reset password');
    req.authenticate(false);
    return req.callAsJson(authResetPasswordResponseSchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async refreshAuthenticationToken(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthRefreshTokenResponse>> {
    const req = this.createRequest('POST', '/auth/refresh-token');
    req.authenticate([]);
    return req.callAsJson(authRefreshTokenResponseSchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async signOutTheCurrentUser(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsDefaultResponse>> {
    const req = this.createRequest('POST', '/auth/signout');
    req.authenticate([]);
    return req.callAsJson(justGainsDefaultResponseSchema, requestOptions);
  }
}
