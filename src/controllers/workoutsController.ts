/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { SortOrderEnum, sortOrderEnumSchema } from '../models/sortOrderEnum';
import { Workout, workoutSchema } from '../models/workout';
import {
  WorkoutResponse,
  workoutResponseSchema,
} from '../models/workoutResponse';
import {
  WorkoutsDuplicateRequest,
  workoutsDuplicateRequestSchema,
} from '../models/workoutsDuplicateRequest';
import {
  WorkoutTableListResponse,
  workoutTableListResponseSchema,
} from '../models/workoutTableListResponse';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class WorkoutsController extends BaseController {
  /**
   * @param page      The page number to retrieve
   * @param pageSize  The number of items to retrieve per page
   * @param sortBy
   * @param sortOrder The order to sort the results in
   * @return Response from the API call
   */
  async getAPaginatedListOfWorkouts(
    page?: number,
    pageSize?: number,
    sortBy?: string,
    sortOrder?: SortOrderEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutTableListResponse>> {
    const req = this.createRequest('GET', '/workouts');
    const mapped = req.prepareArgs({
      page: [page, optional(number())],
      pageSize: [pageSize, optional(number())],
      sortBy: [sortBy, optional(string())],
      sortOrder: [sortOrder, optional(sortOrderEnumSchema)],
    });
    req.query('page', mapped.page);
    req.query('pageSize', mapped.pageSize);
    req.query('sortBy', mapped.sortBy);
    req.query('sortOrder', mapped.sortOrder);
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Invalid pagination parameters'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutTableListResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewWorkout(
    body: Workout,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutResponse>> {
    const req = this.createRequest('POST', '/workouts');
    const mapped = req.prepareArgs({ body: [body, workoutSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid workout data');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutResponseSchema, requestOptions);
  }

  /**
   * @param workoutId
   * @return Response from the API call
   */
  async getAWorkoutByID(
    workoutId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ workoutId: [workoutId, number()] });
    req.appendTemplatePath`/workouts/${mapped.workoutId}`;
    req.throwOn(404, JustGainsErrorResponseError, 'Workout not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutResponseSchema, requestOptions);
  }

  /**
   * Creates a copy of an existing workout, preserving creator credits and adding the current user as a
   * new contributor.
   *
   * @param workoutId    The ID of the workout to duplicate
   * @param body
   * @return Response from the API call
   */
  async duplicateAWorkout(
    workoutId: number,
    body: WorkoutsDuplicateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, number()],
      body: [body, workoutsDuplicateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/workouts/${mapped.workoutId}/duplicate`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid request data');
    req.throwOn(403, JustGainsErrorResponseError, 'Permission denied');
    req.throwOn(404, JustGainsErrorResponseError, 'Workout not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutResponseSchema, requestOptions);
  }
}
