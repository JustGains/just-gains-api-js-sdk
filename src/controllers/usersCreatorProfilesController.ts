/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { CreatorProfile, creatorProfileSchema } from '../models/creatorProfile';
import {
  CreatorProfileListResponse,
  creatorProfileListResponseSchema,
} from '../models/creatorProfileListResponse';
import {
  CreatorProfileResponse,
  creatorProfileResponseSchema,
} from '../models/creatorProfileResponse';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import { boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class UsersCreatorProfilesController extends BaseController {
  /**
   * @param page          Page number for pagination
   * @param mvpAssetsOnly Filter creator profiles with MVP assets only
   * @param limit         Number of items per page
   * @return Response from the API call
   */
  async getCreatorProfiles(
    page?: number,
    mvpAssetsOnly?: boolean,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreatorProfileListResponse>> {
    const req = this.createRequest('GET', '/creator-profiles');
    const mapped = req.prepareArgs({
      page: [page, optional(number())],
      mvpAssetsOnly: [mvpAssetsOnly, optional(boolean())],
      limit: [limit, optional(number())],
    });
    req.query('page', mapped.page);
    req.query('mvpAssetsOnly', mapped.mvpAssetsOnly);
    req.query('limit', mapped.limit);
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(creatorProfileListResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createCreatorProfile(
    body: CreatorProfile,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreatorProfileResponse>> {
    const req = this.createRequest('POST', '/creator-profiles');
    const mapped = req.prepareArgs({ body: [body, creatorProfileSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(401, JustGainsErrorResponseError, 'Unauthorized');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(creatorProfileResponseSchema, requestOptions);
  }

  /**
   * @param creatorProfileId
   * @return Response from the API call
   */
  async getCreatorProfile(
    creatorProfileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreatorProfileResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      creatorProfileId: [creatorProfileId, string()],
    });
    req.appendTemplatePath`/creator-profiles/${mapped.creatorProfileId}`;
    req.throwOn(404, JustGainsErrorResponseError, 'Creator profile not found');
    req.authenticate(false);
    return req.callAsJson(creatorProfileResponseSchema, requestOptions);
  }

  /**
   * @param creatorProfileId
   * @param body
   * @return Response from the API call
   */
  async updateCreatorProfile(
    creatorProfileId: string,
    body: CreatorProfile,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreatorProfileResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      creatorProfileId: [creatorProfileId, string()],
      body: [body, creatorProfileSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/creator-profiles/${mapped.creatorProfileId}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(401, JustGainsErrorResponseError, 'Unauthorized');
    req.throwOn(404, JustGainsErrorResponseError, 'Creator profile not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(creatorProfileResponseSchema, requestOptions);
  }

  /**
   * @param creatorProfileId
   * @return Response from the API call
   */
  async deleteCreatorProfile(
    creatorProfileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      creatorProfileId: [creatorProfileId, string()],
    });
    req.appendTemplatePath`/creator-profiles/${mapped.creatorProfileId}`;
    req.throwOn(401, JustGainsErrorResponseError, 'Unauthorized');
    req.throwOn(404, JustGainsErrorResponseError, 'Creator profile not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }
}
