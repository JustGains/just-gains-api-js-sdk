/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Locale, localeSchema } from '../models/locale';
import {
  LocalesResponse,
  localesResponseSchema,
} from '../models/localesResponse';
import {
  LocalesResponse4,
  localesResponse4Schema,
} from '../models/localesResponse4';
import { boolean, string } from '../schema';
import { BaseController } from './baseController';

export class LocalesController extends BaseController {
  /**
   * @param showAll Example: false
   * @return Response from the API call
   */
  async getLocales(
    showAll: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocalesResponse>> {
    const req = this.createRequest('GET', '/locales');
    const mapped = req.prepareArgs({ showAll: [showAll, boolean()] });
    req.query('showAll', mapped.showAll);
    req.authenticate(false);
    return req.callAsJson(localesResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewLocale(
    body: Locale,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocalesResponse>> {
    const req = this.createRequest('POST', '/locales');
    const mapped = req.prepareArgs({ body: [body, localeSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(localesResponseSchema, requestOptions);
  }

  /**
   * @param localeCode The locale code to retrieve.
   * @return Response from the API call
   */
  async getLocale(
    localeCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocalesResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ localeCode: [localeCode, string()] });
    req.appendTemplatePath`/locales/${mapped.localeCode}`;
    req.authenticate(false);
    return req.callAsJson(localesResponseSchema, requestOptions);
  }

  /**
   * @param localeCode   The locale code to update.
   * @param body
   * @return Response from the API call
   */
  async updateALocale(
    localeCode: string,
    body: Locale,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocalesResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      localeCode: [localeCode, string()],
      body: [body, localeSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/locales/${mapped.localeCode}`;
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(localesResponseSchema, requestOptions);
  }

  /**
   * @param localeCode The locale code to delete.
   * @return Response from the API call
   */
  async deleteALocale(
    localeCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocalesResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ localeCode: [localeCode, string()] });
    req.appendTemplatePath`/locales/${mapped.localeCode}`;
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(localesResponse4Schema, requestOptions);
  }
}
