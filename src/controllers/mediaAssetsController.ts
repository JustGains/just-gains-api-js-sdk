/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { MediaAsset, mediaAssetSchema } from '../models/mediaAsset';
import {
  MediaAssetsResponse,
  mediaAssetsResponseSchema,
} from '../models/mediaAssetsResponse';
import {
  MediaAssetsResponse1,
  mediaAssetsResponse1Schema,
} from '../models/mediaAssetsResponse1';
import {
  MediaAssetsResponse4,
  mediaAssetsResponse4Schema,
} from '../models/mediaAssetsResponse4';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { MediaAssets404Error } from '../errors/mediaAssets404Error';

export class MediaAssetsController extends BaseController {
  /**
   * @param page     Example: 1
   * @param pageSize Example: 20
   * @return Response from the API call
   */
  async getMediaAssets(
    page?: number,
    pageSize?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MediaAssetsResponse>> {
    const req = this.createRequest('GET', '/media-assets');
    const mapped = req.prepareArgs({
      page: [page, optional(number())],
      pageSize: [pageSize, optional(number())],
    });
    req.query('page', mapped.page);
    req.query('pageSize', mapped.pageSize);
    req.authenticate(false);
    return req.callAsJson(mediaAssetsResponseSchema, requestOptions);
  }

  /**
   * @param file
   * @param mediaType
   * @param description
   * @param uploadDirectory Optional. Specify a custom upload directory.
   * @return Response from the API call
   */
  async uploadANewMediaAsset(
    file?: FileWrapper,
    mediaType?: string,
    description?: string,
    uploadDirectory?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MediaAssetsResponse1>> {
    const req = this.createRequest('POST', '/media-assets');
    const mapped = req.prepareArgs({
      mediaType: [mediaType, optional(string())],
      description: [description, optional(string())],
      uploadDirectory: [uploadDirectory, optional(string())],
    });
    req.formData({
      file: file,
      mediaType: mapped.mediaType,
      description: mapped.description,
      uploadDirectory: mapped.uploadDirectory,
    });
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(mediaAssetsResponse1Schema, requestOptions);
  }

  /**
   * @param mediaAssetId
   * @return Response from the API call
   */
  async getMediaAsset(
    mediaAssetId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MediaAssetsResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ mediaAssetId: [mediaAssetId, string()] });
    req.appendTemplatePath`/media-assets/${mapped.mediaAssetId}`;
    req.throwOn(404, MediaAssets404Error, 'Media asset not found');
    req.authenticate(false);
    return req.callAsJson(mediaAssetsResponse1Schema, requestOptions);
  }

  /**
   * @param mediaAssetId
   * @param body
   * @return Response from the API call
   */
  async updateAMediaAsset(
    mediaAssetId: string,
    body: MediaAsset,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MediaAssetsResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      mediaAssetId: [mediaAssetId, string()],
      body: [body, mediaAssetSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/media-assets/${mapped.mediaAssetId}`;
    req.throwOn(404, MediaAssets404Error, 'Media asset not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(mediaAssetsResponse1Schema, requestOptions);
  }

  /**
   * @param mediaAssetId
   * @return Response from the API call
   */
  async deleteAMediaAsset(
    mediaAssetId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MediaAssetsResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ mediaAssetId: [mediaAssetId, string()] });
    req.appendTemplatePath`/media-assets/${mapped.mediaAssetId}`;
    req.throwOn(404, MediaAssets404Error, 'Media asset not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(mediaAssetsResponse4Schema, requestOptions);
  }

  /**
   * @param mediaAssetId
   * @param fileName
   * @return Response from the API call
   */
  async getMediaAssetDetail(
    mediaAssetId: string,
    fileName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      mediaAssetId: [mediaAssetId, string()],
      fileName: [fileName, string()],
    });
    req.appendTemplatePath`/media-assets/${mapped.mediaAssetId}/${mapped.fileName}`;
    req.throwOn(404, MediaAssets404Error, 'Media asset not found');
    req.authenticate(false);
    return req.callAsStream(requestOptions);
  }
}
