/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Exercise, exerciseSchema } from '../models/exercise';
import {
  ExerciseListResponse,
  exerciseListResponseSchema,
} from '../models/exerciseListResponse';
import {
  ExerciseResponse,
  exerciseResponseSchema,
} from '../models/exerciseResponse';
import {
  ExerciseTranslation,
  exerciseTranslationSchema,
} from '../models/exerciseTranslation';
import {
  ExerciseTranslationListResponse,
  exerciseTranslationListResponseSchema,
} from '../models/exerciseTranslationListResponse';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import {
  MuscleGroupDtoResponse,
  muscleGroupDtoResponseSchema,
} from '../models/muscleGroupDtoResponse';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class ExercisesController extends BaseController {
  /**
   * @param nameSearch             List of exercise names to filter by
   * @param exerciseCategoryCodes  List of exercise category codes to filter by
   * @param exerciseTypeCodes      List of exercise types to filter by
   * @param exerciseEquipmentCodes List of exercise equipment to filter by
   * @param exerciseMuscleCodes
   * @param exerciseMetricCodes    List of exercise metrics to filter by
   * @param publishedStatusCodes   List of publish statuses to filter by
   * @param localeCode             Locale to filter by
   * @param pageIndex              Page index for pagination
   * @param pageSize               Page size for pagination
   * @return Response from the API call
   */
  async getExercises(
    nameSearch?: string,
    exerciseCategoryCodes?: string[],
    exerciseTypeCodes?: string[],
    exerciseEquipmentCodes?: string[],
    exerciseMuscleCodes?: string[],
    exerciseMetricCodes?: string[],
    publishedStatusCodes?: string[],
    localeCode?: string,
    pageIndex?: number,
    pageSize?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseListResponse>> {
    const req = this.createRequest('GET', '/exercises');
    const mapped = req.prepareArgs({
      nameSearch: [nameSearch, optional(string())],
      exerciseCategoryCodes: [exerciseCategoryCodes, optional(array(string()))],
      exerciseTypeCodes: [exerciseTypeCodes, optional(array(string()))],
      exerciseEquipmentCodes: [
        exerciseEquipmentCodes,
        optional(array(string())),
      ],
      exerciseMuscleCodes: [exerciseMuscleCodes, optional(array(string()))],
      exerciseMetricCodes: [exerciseMetricCodes, optional(array(string()))],
      publishedStatusCodes: [publishedStatusCodes, optional(array(string()))],
      localeCode: [localeCode, optional(string())],
      pageIndex: [pageIndex, optional(number())],
      pageSize: [pageSize, optional(number())],
    });
    req.query('nameSearch', mapped.nameSearch);
    req.query('exerciseCategoryCodes', mapped.exerciseCategoryCodes);
    req.query('exerciseTypeCodes', mapped.exerciseTypeCodes);
    req.query('exerciseEquipmentCodes', mapped.exerciseEquipmentCodes);
    req.query('exerciseMuscleCodes', mapped.exerciseMuscleCodes);
    req.query('exerciseMetricCodes', mapped.exerciseMetricCodes);
    req.query('publishedStatusCodes', mapped.publishedStatusCodes);
    req.query('localeCode', mapped.localeCode);
    req.query('pageIndex', mapped.pageIndex);
    req.query('pageSize', mapped.pageSize);
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(exerciseListResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @param localeCode   Locale code to specify the language to return the newly created exercise
   *                                        in.
   * @return Response from the API call
   */
  async createANewExercise(
    body: Exercise,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseResponse>> {
    const req = this.createRequest('POST', '/exercises');
    const mapped = req.prepareArgs({
      body: [body, exerciseSchema],
      localeCode: [localeCode, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('localeCode', mapped.localeCode);
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid exercise data');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode
   * @param localeCode   Locale code to specify the language for exercise details
   * @return Response from the API call
   */
  async getExercise(
    exerciseCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise not found');
    req.authenticate(false);
    return req.callAsJson(exerciseResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode
   * @param body
   * @return Response from the API call
   */
  async updateAnExercise(
    exerciseCode: string,
    body: Exercise,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      body: [body, exerciseSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid exercise data');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode
   * @return Response from the API call
   */
  async deleteAnExercise(
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ exerciseCode: [exerciseCode, string()] });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(401, JustGainsErrorResponseError, 'Unauthorized');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode The unique code of the exercise
   * @return Response from the API call
   */
  async getExerciseTranslations(
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseTranslationListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ exerciseCode: [exerciseCode, string()] });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/translations`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise translations not found'
    );
    req.authenticate(false);
    return req.callAsJson(
      exerciseTranslationListResponseSchema,
      requestOptions
    );
  }

  /**
   * @param exerciseCode The unique code of the exercise
   * @param body
   * @return Response from the API call
   */
  async updateExerciseTranslations(
    exerciseCode: string,
    body: ExerciseTranslation[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      body: [body, array(exerciseTranslationSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/translations`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise not found');
    req.throwOn(422, JustGainsErrorResponseError, 'Validation error');
    req.authenticate(false);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode The unique code of the exercise
   * @param localeCode   The locale code for the muscle group names (e.g., 'en-US', 'es-ES')
   * @return Response from the API call
   */
  async getExerciseMuscleGroup(
    exerciseCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupDtoResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/muscle-groups`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise not found');
    req.authenticate(false);
    return req.callAsJson(muscleGroupDtoResponseSchema, requestOptions);
  }
}
