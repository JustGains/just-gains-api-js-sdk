/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Exercise, exerciseSchema } from '../models/exercise';
import {
  ExercisesMuscleGroupsResponse,
  exercisesMuscleGroupsResponseSchema,
} from '../models/exercisesMuscleGroupsResponse';
import {
  ExercisesResponse,
  exercisesResponseSchema,
} from '../models/exercisesResponse';
import {
  ExercisesResponse1,
  exercisesResponse1Schema,
} from '../models/exercisesResponse1';
import {
  ExercisesResponse2,
  exercisesResponse2Schema,
} from '../models/exercisesResponse2';
import {
  ExercisesResponse4,
  exercisesResponse4Schema,
} from '../models/exercisesResponse4';
import {
  ExercisesTranslationsResponse,
  exercisesTranslationsResponseSchema,
} from '../models/exercisesTranslationsResponse';
import {
  ExercisesTranslationsResponse1,
  exercisesTranslationsResponse1Schema,
} from '../models/exercisesTranslationsResponse1';
import {
  ExerciseTranslation,
  exerciseTranslationSchema,
} from '../models/exerciseTranslation';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { Exercises400Error } from '../errors/exercises400Error';
import { Exercises401Error } from '../errors/exercises401Error';
import { Exercises404Error } from '../errors/exercises404Error';
import { Exercises500Error } from '../errors/exercises500Error';
import { ExercisesMuscleGroups400Error } from '../errors/exercisesMuscleGroups400Error';
import { ExercisesMuscleGroups404Error } from '../errors/exercisesMuscleGroups404Error';
import { ExercisesTranslations400Error } from '../errors/exercisesTranslations400Error';
import { ExercisesTranslations404Error } from '../errors/exercisesTranslations404Error';
import { ExercisesTranslations422Error } from '../errors/exercisesTranslations422Error';

export class ExercisesController extends BaseController {
  /**
   * @param exerciseCategoryCodes  List of exercise category codes to filter by
   * @param exerciseTypeCodes      List of exercise types to filter by
   * @param exerciseEquipmentCodes List of exercise equipment to filter by
   * @param exerciseMuscleCodes
   * @param exerciseMetricCodes    List of exercise metrics to filter by
   * @param publishedStatusCodes   List of publish statuses to filter by
   * @param localeCode             Locale to filter by
   * @param pageIndex              Page index for pagination
   * @param pageSize               Page size for pagination
   * @return Response from the API call
   */
  async getExercises(
    exerciseCategoryCodes?: string[],
    exerciseTypeCodes?: string[],
    exerciseEquipmentCodes?: string[],
    exerciseMuscleCodes?: string[],
    exerciseMetricCodes?: string[],
    publishedStatusCodes?: string[],
    localeCode?: string,
    pageIndex?: number,
    pageSize?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesResponse>> {
    const req = this.createRequest('GET', '/exercises');
    const mapped = req.prepareArgs({
      exerciseCategoryCodes: [exerciseCategoryCodes, optional(array(string()))],
      exerciseTypeCodes: [exerciseTypeCodes, optional(array(string()))],
      exerciseEquipmentCodes: [
        exerciseEquipmentCodes,
        optional(array(string())),
      ],
      exerciseMuscleCodes: [exerciseMuscleCodes, optional(array(string()))],
      exerciseMetricCodes: [exerciseMetricCodes, optional(array(string()))],
      publishedStatusCodes: [publishedStatusCodes, optional(array(string()))],
      localeCode: [localeCode, optional(string())],
      pageIndex: [pageIndex, optional(number())],
      pageSize: [pageSize, optional(number())],
    });
    req.query('exerciseCategoryCodes', mapped.exerciseCategoryCodes);
    req.query('exerciseTypeCodes', mapped.exerciseTypeCodes);
    req.query('exerciseEquipmentCodes', mapped.exerciseEquipmentCodes);
    req.query('exerciseMuscleCodes', mapped.exerciseMuscleCodes);
    req.query('exerciseMetricCodes', mapped.exerciseMetricCodes);
    req.query('publishedStatusCodes', mapped.publishedStatusCodes);
    req.query('localeCode', mapped.localeCode);
    req.query('pageIndex', mapped.pageIndex);
    req.query('pageSize', mapped.pageSize);
    req.throwOn(400, Exercises400Error, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(exercisesResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @param localeCode   Locale code to specify the language to return the newly created exercise
   *                                        in.
   * @return Response from the API call
   */
  async createANewExercise(
    body: Exercise,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesResponse1>> {
    const req = this.createRequest('POST', '/exercises');
    const mapped = req.prepareArgs({
      body: [body, exerciseSchema],
      localeCode: [localeCode, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('localeCode', mapped.localeCode);
    req.json(mapped.body);
    req.throwOn(400, Exercises400Error, 'Invalid exercise data');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exercisesResponse1Schema, requestOptions);
  }

  /**
   * @param exerciseCode
   * @param localeCode   Locale code to specify the language for exercise details
   * @return Response from the API call
   */
  async getExercise(
    exerciseCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesResponse2>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}`;
    req.throwOn(400, Exercises400Error, 'Bad request');
    req.throwOn(404, Exercises404Error, 'Exercise not found');
    req.authenticate(false);
    return req.callAsJson(exercisesResponse2Schema, requestOptions);
  }

  /**
   * @param exerciseCode
   * @param body
   * @return Response from the API call
   */
  async updateAnExercise(
    exerciseCode: string,
    body: Exercise,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesResponse2>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      body: [body, exerciseSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}`;
    req.throwOn(400, Exercises400Error, 'Invalid exercise data');
    req.throwOn(500, Exercises500Error, 'Internal server error');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exercisesResponse2Schema, requestOptions);
  }

  /**
   * @param exerciseCode
   * @return Response from the API call
   */
  async deleteAnExercise(
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ exerciseCode: [exerciseCode, string()] });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}`;
    req.throwOn(400, Exercises400Error, 'Bad request');
    req.throwOn(401, Exercises401Error, 'Unauthorized');
    req.throwOn(404, Exercises404Error, 'Exercise not found');
    req.throwOn(500, Exercises500Error, 'Internal server error');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exercisesResponse4Schema, requestOptions);
  }

  /**
   * @param exerciseCode The unique code of the exercise
   * @return Response from the API call
   */
  async getExerciseTranslations(
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesTranslationsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ exerciseCode: [exerciseCode, string()] });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/translations`;
    req.throwOn(400, ExercisesTranslations400Error, 'Bad request');
    req.throwOn(
      404,
      ExercisesTranslations404Error,
      'Exercise translations not found'
    );
    req.authenticate(false);
    return req.callAsJson(exercisesTranslationsResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode The unique code of the exercise
   * @param body
   * @return Response from the API call
   */
  async updateExerciseTranslations(
    exerciseCode: string,
    body: ExerciseTranslation[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesTranslationsResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      body: [body, array(exerciseTranslationSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/translations`;
    req.throwOn(400, ExercisesTranslations400Error, 'Bad request');
    req.throwOn(404, ExercisesTranslations404Error, 'Exercise not found');
    req.throwOn(422, ExercisesTranslations422Error, 'Validation error');
    req.authenticate(false);
    return req.callAsJson(exercisesTranslationsResponse1Schema, requestOptions);
  }

  /**
   * @param exerciseCode The unique code of the exercise
   * @param localeCode   The locale code for the muscle group names (e.g., 'en-US', 'es-ES')
   * @return Response from the API call
   */
  async getExerciseMuscleGroup(
    exerciseCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesMuscleGroupsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/muscle-groups`;
    req.throwOn(400, ExercisesMuscleGroups400Error, 'Bad request');
    req.throwOn(404, ExercisesMuscleGroups404Error, 'Exercise not found');
    req.authenticate(false);
    return req.callAsJson(exercisesMuscleGroupsResponseSchema, requestOptions);
  }
}
