/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ExercisesVideosResponse1,
  exercisesVideosResponse1Schema,
} from '../models/exercisesVideosResponse1';
import {
  ExerciseVideoListResponse,
  exerciseVideoListResponseSchema,
} from '../models/exerciseVideoListResponse';
import {
  ExerciseVideoResponse,
  exerciseVideoResponseSchema,
} from '../models/exerciseVideoResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import {
  MediaAssetAssignment,
  mediaAssetAssignmentSchema,
} from '../models/mediaAssetAssignment';
import { number, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class ExerciseLibraryExercisesExerciseVideosController extends BaseController {
  /**
   * @param exerciseCode The exercise code to retrieve videos for
   * @return Response from the API call
   */
  async getExerciseVideoOn(
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseVideoListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ exerciseCode: [exerciseCode, string()] });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/videos`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid exercise code');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise videos not found');
    req.authenticate(false);
    return req.callAsJson(exerciseVideoListResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode     The exercise code to retrieve videos for
   * @param creatorProfileId The creatorProfileId of the creator whose videos we're referencing
   * @return Response from the API call
   */
  async getExerciseVideoByUserId(
    exerciseCode: string,
    creatorProfileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExercisesVideosResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      creatorProfileId: [creatorProfileId, string()],
    });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/videos/${mapped.creatorProfileId}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid exercise code');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise videos not found');
    req.authenticate(false);
    return req.callAsJson(exercisesVideosResponse1Schema, requestOptions);
  }

  /**
   * @param exerciseCode     The exercise code to add videos to
   * @param creatorProfileId The creatorProfileId of the video creator
   * @param body
   * @return Response from the API call
   */
  async addNewExerciseVideosToTheSpecifiedCreatorTheme(
    exerciseCode: string,
    creatorProfileId: string,
    body: MediaAssetAssignment,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseVideoResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      creatorProfileId: [creatorProfileId, string()],
      body: [body, mediaAssetAssignmentSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/videos/${mapped.creatorProfileId}`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Invalid exercise video data'
    );
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseVideoResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode     The exercise code
   * @param creatorProfileId The creatorProfileId of the video creator
   * @param exerciseVideoId  The exercise video ID to delete
   * @return Response from the API call
   */
  async deleteAnExerciseVideo(
    exerciseCode: string,
    creatorProfileId: string,
    exerciseVideoId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      creatorProfileId: [creatorProfileId, string()],
      exerciseVideoId: [exerciseVideoId, number()],
    });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/videos/${mapped.creatorProfileId}/${mapped.exerciseVideoId}`;
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.throwOn(404, JustGainsErrorResponseError, 'Exercise video not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }
}
