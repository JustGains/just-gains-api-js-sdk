/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import {
  SocialMediaPlatformCreate,
  socialMediaPlatformCreateSchema,
} from '../models/socialMediaPlatformCreate';
import {
  SocialMediaPlatformListResponse,
  socialMediaPlatformListResponseSchema,
} from '../models/socialMediaPlatformListResponse';
import {
  SocialMediaPlatformResponse,
  socialMediaPlatformResponseSchema,
} from '../models/socialMediaPlatformResponse';
import {
  SocialMediaPlatformsValidateUsernameResponse,
  socialMediaPlatformsValidateUsernameResponseSchema,
} from '../models/socialMediaPlatformsValidateUsernameResponse';
import {
  SocialMediaPlatformUpdate,
  socialMediaPlatformUpdateSchema,
} from '../models/socialMediaPlatformUpdate';
import { optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class UsersSocialMediaAccountsController extends BaseController {
  /**
   * Retrieve a list of Users|Social Media Accounts with optional name filter
   *
   * @param name Filter platforms by name
   * @return Response from the API call
   */
  async listUsersSocialMediaAccounts(
    name?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SocialMediaPlatformListResponse>> {
    const req = this.createRequest('GET', '/social-media-platforms');
    const mapped = req.prepareArgs({ name: [name, optional(string())] });
    req.query('name', mapped.name);
    req.authenticate([]);
    return req.callAsJson(
      socialMediaPlatformListResponseSchema,
      requestOptions
    );
  }

  /**
   * Create a new social media platform
   *
   * @param body
   * @return Response from the API call
   */
  async createSocialMediaPlatform(
    body: SocialMediaPlatformCreate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SocialMediaPlatformResponse>> {
    const req = this.createRequest('POST', '/social-media-platforms');
    const mapped = req.prepareArgs({
      body: [body, socialMediaPlatformCreateSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate([]);
    return req.callAsJson(socialMediaPlatformResponseSchema, requestOptions);
  }

  /**
   * Retrieve details of a specific social media platform
   *
   * @param socialMediaPlatformCode The unique code of the social media platform
   * @return Response from the API call
   */
  async getSocialMediaPlatform(
    socialMediaPlatformCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SocialMediaPlatformResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      socialMediaPlatformCode: [socialMediaPlatformCode, string()],
    });
    req.appendTemplatePath`/social-media-platforms/${mapped.socialMediaPlatformCode}`;
    req.authenticate([]);
    return req.callAsJson(socialMediaPlatformResponseSchema, requestOptions);
  }

  /**
   * Update an existing social media platform
   *
   * @param socialMediaPlatformCode The unique code of the social media platform
   * @param body
   * @return Response from the API call
   */
  async updateSocialMediaPlatform(
    socialMediaPlatformCode: string,
    body: SocialMediaPlatformUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SocialMediaPlatformResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      socialMediaPlatformCode: [socialMediaPlatformCode, string()],
      body: [body, socialMediaPlatformUpdateSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/social-media-platforms/${mapped.socialMediaPlatformCode}`;
    req.authenticate([]);
    return req.callAsJson(socialMediaPlatformResponseSchema, requestOptions);
  }

  /**
   * Delete a social media platform
   *
   * @param socialMediaPlatformCode The unique code of the social media platform
   * @return Response from the API call
   */
  async deleteSocialMediaPlatform(
    socialMediaPlatformCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      socialMediaPlatformCode: [socialMediaPlatformCode, string()],
    });
    req.appendTemplatePath`/social-media-platforms/${mapped.socialMediaPlatformCode}`;
    req.authenticate([]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param socialMediaPlatformCode The code of the social media platform to check against
   * @param username                The username to validate
   * @return Response from the API call
   */
  async validateSocialMediaUsername(
    socialMediaPlatformCode: string,
    username: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SocialMediaPlatformsValidateUsernameResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      socialMediaPlatformCode: [socialMediaPlatformCode, string()],
      username: [username, string()],
    });
    req.appendTemplatePath`/social-media-platforms/${mapped.socialMediaPlatformCode}/validate-username/${mapped.username}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(
      socialMediaPlatformsValidateUsernameResponseSchema,
      requestOptions
    );
  }
}
