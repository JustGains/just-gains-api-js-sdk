/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { EquipmentGroup, equipmentGroupSchema } from '../models/equipmentGroup';
import {
  EquipmentGroupListResponse,
  equipmentGroupListResponseSchema,
} from '../models/equipmentGroupListResponse';
import {
  EquipmentGroupTranslation,
  equipmentGroupTranslationSchema,
} from '../models/equipmentGroupTranslation';
import {
  EquipmentGroupTranslationListResponse,
  equipmentGroupTranslationListResponseSchema,
} from '../models/equipmentGroupTranslationListResponse';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class EquipmentEquipmentGroupsController extends BaseController {
  /**
   * @param localeCode The locale to use for the localized equipment group names.
   * @return Response from the API call
   */
  async getEquipmentGroups(
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentGroupListResponse>> {
    const req = this.createRequest('GET', '/equipment-groups');
    const mapped = req.prepareArgs({
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(equipmentGroupListResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async addEquipmentGroup(
    body: EquipmentGroup,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/equipment-groups');
    const mapped = req.prepareArgs({ body: [body, equipmentGroupSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param equipmentGroupCode The equipment group code to update.
   * @param body
   * @return Response from the API call
   */
  async updateAnExistingEquipmentGroup(
    equipmentGroupCode: string,
    body: EquipmentGroup,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      equipmentGroupCode: [equipmentGroupCode, string()],
      body: [body, equipmentGroupSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/equipment-groups/${mapped.equipmentGroupCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param equipmentGroupCode The equipment group code to delete.
   * @return Response from the API call
   */
  async deleteAnEquipmentGroup(
    equipmentGroupCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      equipmentGroupCode: [equipmentGroupCode, string()],
    });
    req.appendTemplatePath`/equipment-groups/${mapped.equipmentGroupCode}`;
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }

  /**
   * @param equipmentGroupCode The unique code of the equipment group
   * @return Response from the API call
   */
  async getEquipmentGroupTranslations(
    equipmentGroupCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EquipmentGroupTranslationListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      equipmentGroupCode: [equipmentGroupCode, string()],
    });
    req.appendTemplatePath`/equipment-groups/${mapped.equipmentGroupCode}/translations`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(404, JustGainsErrorResponseError, 'Equipment group not found');
    req.authenticate(false);
    return req.callAsJson(
      equipmentGroupTranslationListResponseSchema,
      requestOptions
    );
  }

  /**
   * Updates the translations for a specific equipment group identified by its code.
   *
   * @param equipmentGroupCode The unique code of the equipment group
   * @param body
   * @return Response from the API call
   */
  async updateEquipmentGroupTranslations(
    equipmentGroupCode: string,
    body: EquipmentGroupTranslation[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      equipmentGroupCode: [equipmentGroupCode, string()],
      body: [body, array(equipmentGroupTranslationSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/equipment-groups/${mapped.equipmentGroupCode}/translations`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(404, JustGainsErrorResponseError, 'Equipment group not found');
    req.throwOn(422, JustGainsErrorResponseError, 'Validation error');
    req.authenticate([]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }
}
