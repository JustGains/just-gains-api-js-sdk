/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ExerciseThumbnail,
  exerciseThumbnailSchema,
} from '../models/exerciseThumbnail';
import {
  ExerciseThumbnailListResponse,
  exerciseThumbnailListResponseSchema,
} from '../models/exerciseThumbnailListResponse';
import {
  ExerciseThumbnailResponse,
  exerciseThumbnailResponseSchema,
} from '../models/exerciseThumbnailResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import { string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class ExercisesExerciseThumbnailsController extends BaseController {
  /**
   * @param exerciseCode The exercise code to retrieve thumbnails for
   * @return Response from the API call
   */
  async getExerciseThumbnails(
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseThumbnailListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ exerciseCode: [exerciseCode, string()] });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/thumbnails`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid exercise code');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise thumbnails not found'
    );
    req.authenticate(false);
    return req.callAsJson(exerciseThumbnailListResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode     The exercise code to retrieve thumbnail for
   * @param creatorProfileId The creatorProfileId of the creator whose thumbnail we're referencing
   * @return Response from the API call
   */
  async getExerciseThumbnailByCreatorProfileId(
    exerciseCode: string,
    creatorProfileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseThumbnailResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      creatorProfileId: [creatorProfileId, string()],
    });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/thumbnails/${mapped.creatorProfileId}`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Invalid exercise code or user ID'
    );
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise thumbnail not found'
    );
    req.authenticate(false);
    return req.callAsJson(exerciseThumbnailResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode     The exercise code to add or update thumbnail for
   * @param creatorProfileId The creatorProfileId of the thumbnail creator
   * @param body
   * @return Response from the API call
   */
  async addOrUpdateExerciseThumbnail(
    exerciseCode: string,
    creatorProfileId: string,
    body: ExerciseThumbnail,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseThumbnailResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      creatorProfileId: [creatorProfileId, string()],
      body: [body, exerciseThumbnailSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/thumbnails/${mapped.creatorProfileId}`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Invalid exercise thumbnail data'
    );
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseThumbnailResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode     The exercise code
   * @param creatorProfileId The creatorProfileId of the thumbnail creator
   * @return Response from the API call
   */
  async deleteAnExerciseThumbnail(
    exerciseCode: string,
    creatorProfileId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      creatorProfileId: [creatorProfileId, string()],
    });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/thumbnails/${mapped.creatorProfileId}`;
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise thumbnail not found'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }
}
