/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import { WorkoutData, workoutDataSchema } from '../models/workoutData';
import {
  WorkoutDataListResponse,
  workoutDataListResponseSchema,
} from '../models/workoutDataListResponse';
import {
  WorkoutDataResponse,
  workoutDataResponseSchema,
} from '../models/workoutDataResponse';
import { array, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class WorkoutsWorkoutDataController extends BaseController {
  /**
   * @param workoutId
   * @return Response from the API call
   */
  async getWorkoutDataById(
    workoutId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutDataListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ workoutId: [workoutId, string()] });
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data`;
    req.throwOn(404, JustGainsErrorResponseError, 'Workout not found');
    req.authenticate(false);
    return req.callAsJson(workoutDataListResponseSchema, requestOptions);
  }

  /**
   * @param workoutId
   * @param body
   * @return Response from the API call
   */
  async updateWorkoutDataByWorkoutID(
    workoutId: string,
    body: WorkoutData[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutDataListResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, string()],
      body: [body, array(workoutDataSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid workout data');
    req.throwOn(404, JustGainsErrorResponseError, 'Workout not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutDataListResponseSchema, requestOptions);
  }

  /**
   * @param workoutId    The unique identifier code of the workout to retrieve the exercise from
   * @param exerciseCode The unique identifier code of the exercise to retrieve
   * @return Response from the API call
   */
  async getWorkoutDetailById(
    workoutId: string,
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutDataResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, string()],
      exerciseCode: [exerciseCode, string()],
    });
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data/${mapped.exerciseCode}`;
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Workout or exercise not found'
    );
    req.authenticate(false);
    return req.callAsJson(workoutDataResponseSchema, requestOptions);
  }

  /**
   * @param workoutId    The unique identifier code of the workout to update the exercise in
   * @param exerciseCode The unique identifier code of the exercise to update
   * @param body
   * @return Response from the API call
   */
  async updateExerciseInTheWorkout(
    workoutId: string,
    exerciseCode: string,
    body: WorkoutData,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutDataResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, string()],
      exerciseCode: [exerciseCode, string()],
      body: [body, workoutDataSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data/${mapped.exerciseCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid exercise data');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Workout or exercise not found'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutDataResponseSchema, requestOptions);
  }

  /**
   * @param workoutId    The unique identifier code of the workout to remove the exercise from
   * @param exerciseCode The unique identifier code of the exercise to remove
   * @return Response from the API call
   */
  async deletesAnExerciseFromTheWorkout(
    workoutId: string,
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, string()],
      exerciseCode: [exerciseCode, string()],
    });
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data/${mapped.exerciseCode}`;
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Workout or exercise not found'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }
}
