/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { WorkoutData, workoutDataSchema } from '../models/workoutData';
import {
  WorkoutsDataResponse,
  workoutsDataResponseSchema,
} from '../models/workoutsDataResponse';
import {
  WorkoutsDataResponse1,
  workoutsDataResponse1Schema,
} from '../models/workoutsDataResponse1';
import { number, string } from '../schema';
import { BaseController } from './baseController';
import { WorkoutsData400Error } from '../errors/workoutsData400Error';
import { WorkoutsData404Error } from '../errors/workoutsData404Error';

export class WorkoutsWorkoutDataController extends BaseController {
  /**
   * @param workoutId
   * @return Response from the API call
   */
  async getWorkoutDataById(
    workoutId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutsDataResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ workoutId: [workoutId, number()] });
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data`;
    req.throwOn(404, WorkoutsData404Error, 'Workout not found');
    req.authenticate(false);
    return req.callAsJson(workoutsDataResponseSchema, requestOptions);
  }

  /**
   * @param workoutId
   * @param exerciseCode
   * @return Response from the API call
   */
  async getWorkoutDetailById(
    workoutId: number,
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutsDataResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, number()],
      exerciseCode: [exerciseCode, string()],
    });
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data/${mapped.exerciseCode}`;
    req.throwOn(404, WorkoutsData404Error, 'Workout or exercise not found');
    req.authenticate(false);
    return req.callAsJson(workoutsDataResponse1Schema, requestOptions);
  }

  /**
   * @param workoutId
   * @param exerciseCode
   * @param body
   * @return Response from the API call
   */
  async addNewExerciseToTheWorkout(
    workoutId: number,
    exerciseCode: string,
    body: WorkoutData,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutsDataResponse1>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, number()],
      exerciseCode: [exerciseCode, string()],
      body: [body, workoutDataSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data/${mapped.exerciseCode}`;
    req.throwOn(400, WorkoutsData400Error, 'Invalid exercise data');
    req.throwOn(404, WorkoutsData404Error, 'Workout not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutsDataResponse1Schema, requestOptions);
  }

  /**
   * @param workoutId
   * @param exerciseCode
   * @param body
   * @return Response from the API call
   */
  async updateExerciseInTheWorkout(
    workoutId: number,
    exerciseCode: string,
    body: WorkoutData,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutsDataResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, number()],
      exerciseCode: [exerciseCode, string()],
      body: [body, workoutDataSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data/${mapped.exerciseCode}`;
    req.throwOn(400, WorkoutsData400Error, 'Invalid exercise data');
    req.throwOn(404, WorkoutsData404Error, 'Workout or exercise not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutsDataResponse1Schema, requestOptions);
  }

  /**
   * @param workoutId
   * @param exerciseCode
   * @return Response from the API call
   */
  async deletesAnExerciseFromTheWorkout(
    workoutId: number,
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkoutsDataResponse1>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      workoutId: [workoutId, number()],
      exerciseCode: [exerciseCode, string()],
    });
    req.appendTemplatePath`/workouts/${mapped.workoutId}/data/${mapped.exerciseCode}`;
    req.throwOn(404, WorkoutsData404Error, 'Workout or exercise not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(workoutsDataResponse1Schema, requestOptions);
  }
}
