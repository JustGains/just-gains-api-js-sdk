/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import {
  UserInfoListResponse,
  userInfoListResponseSchema,
} from '../models/userInfoListResponse';
import { UserResponse, userResponseSchema } from '../models/userResponse';
import {
  UserWithoutCreatorProfile,
  userWithoutCreatorProfileSchema,
} from '../models/userWithoutCreatorProfile';
import {
  UserWithoutCreatorProfileResponse,
  userWithoutCreatorProfileResponseSchema,
} from '../models/userWithoutCreatorProfileResponse';
import { string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class UsersController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getAListOfAllUsersForAdminManagement(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserInfoListResponse>> {
    const req = this.createRequest('GET', '/users');
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.throwOn(403, JustGainsErrorResponseError, 'Access denied');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(userInfoListResponseSchema, requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async getAUserByID(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid user ID format');
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.throwOn(403, JustGainsErrorResponseError, 'Access denied');
    req.throwOn(404, JustGainsErrorResponseError, 'User not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * @param userId
   * @param body
   * @return Response from the API call
   */
  async updateAUser(
    userId: string,
    body: UserWithoutCreatorProfile,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserWithoutCreatorProfileResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      userId: [userId, string()],
      body: [body, userWithoutCreatorProfileSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/users/${mapped.userId}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid user data');
    req.throwOn(404, JustGainsErrorResponseError, 'User not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(
      userWithoutCreatorProfileResponseSchema,
      requestOptions
    );
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async deleteAUser(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}`;
    req.throwOn(404, JustGainsErrorResponseError, 'User not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param creatorProfileId The ID of the creator profile to assign to the user
   * @param userId           The ID of the user to assign the creator profile to
   * @return Response from the API call
   */
  async assignUserCreatorProfile(
    creatorProfileId: string,
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      creatorProfileId: [creatorProfileId, string()],
      userId: [userId, string()],
    });
    req.appendTemplatePath`/user/${mapped.userId}/${mapped.creatorProfileId}`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to assign creator profile to user'
    );
    req.throwOn(
      409,
      JustGainsErrorResponseError,
      'Creator profile is already assigned to another user'
    );
    req.authenticate([{ bearerAuth: true }, { userRoles: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }
}
