/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { UsersResponse, usersResponseSchema } from '../models/usersResponse';
import { UsersResponse1, usersResponse1Schema } from '../models/usersResponse1';
import { UsersResponse2, usersResponse2Schema } from '../models/usersResponse2';
import { UsersResponse3, usersResponse3Schema } from '../models/usersResponse3';
import {
  UserWithoutCreatorProfile,
  userWithoutCreatorProfileSchema,
} from '../models/userWithoutCreatorProfile';
import { array, string } from '../schema';
import { BaseController } from './baseController';
import { Users400Error } from '../errors/users400Error';
import { Users401Error } from '../errors/users401Error';
import { Users403Error } from '../errors/users403Error';
import { Users404Error } from '../errors/users404Error';

export class UsersController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getAListOfAllUsers(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UsersResponse[]>> {
    const req = this.createRequest('GET', '/users');
    req.throwOn(401, Users401Error, 'Authentication required');
    req.throwOn(403, Users403Error, 'Access denied');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(array(usersResponseSchema), requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async getAUserByID(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UsersResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}`;
    req.throwOn(400, Users400Error, 'Invalid user ID format');
    req.throwOn(401, Users401Error, 'Authentication required');
    req.throwOn(403, Users403Error, 'Access denied');
    req.throwOn(404, Users404Error, 'User not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(usersResponse1Schema, requestOptions);
  }

  /**
   * @param userId
   * @param body
   * @return Response from the API call
   */
  async updateAUser(
    userId: string,
    body: UserWithoutCreatorProfile,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UsersResponse2>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      userId: [userId, string()],
      body: [body, userWithoutCreatorProfileSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/users/${mapped.userId}`;
    req.throwOn(400, Users400Error, 'Invalid user data');
    req.throwOn(404, Users404Error, 'User not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(usersResponse2Schema, requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async deleteAUser(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UsersResponse3>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}`;
    req.throwOn(404, Users404Error, 'User not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(usersResponse3Schema, requestOptions);
  }
}
