/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { MuscleGroup, muscleGroupSchema } from '../models/muscleGroup';
import {
  MuscleGroupsResponse,
  muscleGroupsResponseSchema,
} from '../models/muscleGroupsResponse';
import {
  MuscleGroupsResponse1,
  muscleGroupsResponse1Schema,
} from '../models/muscleGroupsResponse1';
import {
  MuscleGroupsResponse4,
  muscleGroupsResponse4Schema,
} from '../models/muscleGroupsResponse4';
import {
  MuscleGroupsTranslationsResponse,
  muscleGroupsTranslationsResponseSchema,
} from '../models/muscleGroupsTranslationsResponse';
import {
  MuscleGroupsTranslationsResponse1,
  muscleGroupsTranslationsResponse1Schema,
} from '../models/muscleGroupsTranslationsResponse1';
import {
  MuscleGroupTranslation,
  muscleGroupTranslationSchema,
} from '../models/muscleGroupTranslation';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { MuscleGroups400Error } from '../errors/muscleGroups400Error';
import { MuscleGroups401Error } from '../errors/muscleGroups401Error';
import { MuscleGroups404Error } from '../errors/muscleGroups404Error';
import { MuscleGroupsTranslations400Error } from '../errors/muscleGroupsTranslations400Error';
import { MuscleGroupsTranslations404Error } from '../errors/muscleGroupsTranslations404Error';
import { MuscleGroupsTranslations422Error } from '../errors/muscleGroupsTranslations422Error';

export class MusclesMuscleGroupsController extends BaseController {
  /**
   * @param localeCode The locale to use for the localized muscle group names.
   * @return Response from the API call
   */
  async getMuscleGroups(
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupsResponse>> {
    const req = this.createRequest('GET', '/muscle-groups');
    const mapped = req.prepareArgs({
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.authenticate(false);
    return req.callAsJson(muscleGroupsResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewMuscleGroup(
    body: MuscleGroup,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupsResponse1>> {
    const req = this.createRequest('POST', '/muscle-groups');
    const mapped = req.prepareArgs({ body: [body, muscleGroupSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, MuscleGroups400Error, 'Invalid muscle group data');
    req.throwOn(401, MuscleGroups401Error, 'Authentication required');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(muscleGroupsResponse1Schema, requestOptions);
  }

  /**
   * @param muscleGroupCode The muscle group code to retrieve.
   * @param localeCode      The locale to use for the localized muscle group names.
   * @return Response from the API call
   */
  async getMuscleGroup(
    muscleGroupCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupsResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}`;
    req.authenticate(false);
    return req.callAsJson(muscleGroupsResponse1Schema, requestOptions);
  }

  /**
   * @param muscleGroupCode The muscle group code to update.
   * @param body
   * @return Response from the API call
   */
  async updateAMuscleGroup(
    muscleGroupCode: string,
    body: MuscleGroup,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupsResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
      body: [body, muscleGroupSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}`;
    req.throwOn(400, MuscleGroups400Error, 'Invalid muscle group data');
    req.throwOn(401, MuscleGroups401Error, 'Authentication required');
    req.throwOn(404, MuscleGroups404Error, 'Muscle group not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(muscleGroupsResponse1Schema, requestOptions);
  }

  /**
   * @param muscleGroupCode The muscle group code to delete.
   * @return Response from the API call
   */
  async deleteAMuscleGroup(
    muscleGroupCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupsResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
    });
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}`;
    req.throwOn(401, MuscleGroups401Error, 'Authentication required');
    req.throwOn(404, MuscleGroups404Error, 'Muscle group not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(muscleGroupsResponse4Schema, requestOptions);
  }

  /**
   * @param muscleGroupCode The unique code of the muscle group
   * @return Response from the API call
   */
  async getMuscleGroupTranslations(
    muscleGroupCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupsTranslationsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
    });
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}/translations`;
    req.throwOn(
      400,
      MuscleGroupsTranslations400Error,
      'Failed to retrieve muscle group translations'
    );
    req.throwOn(
      404,
      MuscleGroupsTranslations404Error,
      'Muscle group not found'
    );
    req.authenticate(false);
    return req.callAsJson(
      muscleGroupsTranslationsResponseSchema,
      requestOptions
    );
  }

  /**
   * @param muscleGroupCode The unique code of the muscle group
   * @param body
   * @return Response from the API call
   */
  async updateMuscleGroupTranslations(
    muscleGroupCode: string,
    body: MuscleGroupTranslation[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupsTranslationsResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
      body: [body, array(muscleGroupTranslationSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}/translations`;
    req.throwOn(
      400,
      MuscleGroupsTranslations400Error,
      'Failed to update muscle group translations'
    );
    req.throwOn(
      404,
      MuscleGroupsTranslations404Error,
      'Muscle group not found'
    );
    req.throwOn(422, MuscleGroupsTranslations422Error, 'Validation error');
    req.authenticate(false);
    return req.callAsJson(
      muscleGroupsTranslationsResponse1Schema,
      requestOptions
    );
  }
}
