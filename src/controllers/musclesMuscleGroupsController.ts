/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import { MuscleGroup, muscleGroupSchema } from '../models/muscleGroup';
import {
  MuscleGroupListResponse,
  muscleGroupListResponseSchema,
} from '../models/muscleGroupListResponse';
import {
  MuscleGroupTranslation,
  muscleGroupTranslationSchema,
} from '../models/muscleGroupTranslation';
import {
  MuscleGroupTranslationListResponse,
  muscleGroupTranslationListResponseSchema,
} from '../models/muscleGroupTranslationListResponse';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class MusclesMuscleGroupsController extends BaseController {
  /**
   * @param localeCode The locale to use for the localized muscle group names.
   * @return Response from the API call
   */
  async getMuscleGroups(
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupListResponse>> {
    const req = this.createRequest('GET', '/muscle-groups');
    const mapped = req.prepareArgs({
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.authenticate(false);
    return req.callAsJson(muscleGroupListResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewMuscleGroup(
    body: MuscleGroup,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('POST', '/muscle-groups');
    const mapped = req.prepareArgs({ body: [body, muscleGroupSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid muscle group data');
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param muscleGroupCode The muscle group code to update.
   * @param body
   * @return Response from the API call
   */
  async updateMuscleGroup(
    muscleGroupCode: string,
    body: MuscleGroup,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
      body: [body, muscleGroupSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Invalid muscle group data');
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.throwOn(404, JustGainsErrorResponseError, 'Muscle group not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param muscleGroupCode The muscle group code to delete.
   * @return Response from the API call
   */
  async deleteAMuscleGroup(
    muscleGroupCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
    });
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}`;
    req.throwOn(401, JustGainsErrorResponseError, 'Authentication required');
    req.throwOn(404, JustGainsErrorResponseError, 'Muscle group not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param muscleGroupCode The unique code of the muscle group
   * @return Response from the API call
   */
  async getMuscleGroupTranslations(
    muscleGroupCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MuscleGroupTranslationListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
    });
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}/translations`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to retrieve muscle group translations'
    );
    req.throwOn(404, JustGainsErrorResponseError, 'Muscle group not found');
    req.authenticate(false);
    return req.callAsJson(
      muscleGroupTranslationListResponseSchema,
      requestOptions
    );
  }

  /**
   * @param muscleGroupCode The unique code of the muscle group
   * @param body
   * @return Response from the API call
   */
  async updateMuscleGroupTranslations(
    muscleGroupCode: string,
    body: MuscleGroupTranslation[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      muscleGroupCode: [muscleGroupCode, string()],
      body: [body, array(muscleGroupTranslationSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/muscle-groups/${mapped.muscleGroupCode}/translations`;
    req.throwOn(
      400,
      JustGainsErrorResponseError,
      'Failed to update muscle group translations'
    );
    req.throwOn(404, JustGainsErrorResponseError, 'Muscle group not found');
    req.throwOn(422, JustGainsErrorResponseError, 'Validation error');
    req.authenticate(false);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }
}
