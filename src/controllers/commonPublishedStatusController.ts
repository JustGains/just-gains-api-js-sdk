/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import {
  JustGainsResponse,
  justGainsResponseSchema,
} from '../models/justGainsResponse';
import {
  PublishedStatus,
  publishedStatusSchema,
} from '../models/publishedStatus';
import {
  PublishedStatusListResponse,
  publishedStatusListResponseSchema,
} from '../models/publishedStatusListResponse';
import { string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class CommonPublishedStatusController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getAllPublishedStatus(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusListResponse>> {
    const req = this.createRequest('GET', '/published-status');
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(publishedStatusListResponseSchema, requestOptions);
  }

  /**
   * @param publishedStatusCode
   * @param body
   * @return Response from the API call
   */
  async createUpdateAPublishedStatus(
    publishedStatusCode: string,
    body: PublishedStatus,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      publishedStatusCode: [publishedStatusCode, string()],
      body: [body, publishedStatusSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/published-status/${mapped.publishedStatusCode}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(404, JustGainsErrorResponseError, 'Published status not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }

  /**
   * @param publishedStatusCode
   * @return Response from the API call
   */
  async deleteAPublishedStatus(
    publishedStatusCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      publishedStatusCode: [publishedStatusCode, string()],
    });
    req.appendTemplatePath`/published-status/${mapped.publishedStatusCode}`;
    req.throwOn(404, JustGainsErrorResponseError, 'Published status not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsResponseSchema, requestOptions);
  }
}
