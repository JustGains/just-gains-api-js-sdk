/**
 * JustGains-APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ExerciseInstruction,
  exerciseInstructionSchema,
} from '../models/exerciseInstruction';
import {
  ExerciseInstructionListResponse,
  exerciseInstructionListResponseSchema,
} from '../models/exerciseInstructionListResponse';
import {
  ExerciseInstructionResponse,
  exerciseInstructionResponseSchema,
} from '../models/exerciseInstructionResponse';
import {
  JustGainsBasicResponse,
  justGainsBasicResponseSchema,
} from '../models/justGainsBasicResponse';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { JustGainsErrorResponseError } from '../errors/justGainsErrorResponseError';

export class ExercisesExerciseInstructionsController extends BaseController {
  /**
   * @param exerciseCode The exercise code to retrieve instruction models for
   * @param localeCodes  The array of locales for the instructions (e.g., 'en-US', 'es-ES')
   * @return Response from the API call
   */
  async getExerciseInstructions(
    exerciseCode: string,
    localeCodes?: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseInstructionListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      localeCodes: [localeCodes, optional(array(string()))],
    });
    req.query('localeCodes', mapped.localeCodes);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/instructions`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise instructions not found'
    );
    req.authenticate(false);
    return req.callAsJson(
      exerciseInstructionListResponseSchema,
      requestOptions
    );
  }

  /**
   * @param body
   * @param exerciseCode The exercise code to create instructions for
   * @return Response from the API call
   */
  async createNewExerciseInstructions(
    body: ExerciseInstruction,
    exerciseCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseInstructionResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      body: [body, exerciseInstructionSchema],
      exerciseCode: [exerciseCode, string()],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/instructions`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(401, JustGainsErrorResponseError, 'Unauthorized');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseInstructionResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode The exercise code to retrieve instructions for
   * @param localeCode   The locale for the instructions (e.g., 'en-US', 'es-ES')
   * @param userId       The UserID that belongs to the instructions being requested
   * @return Response from the API call
   */
  async getExerciseInstruction(
    exerciseCode: string,
    localeCode: string,
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseInstructionResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      localeCode: [localeCode, string()],
      userId: [userId, string()],
    });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/instructions/${mapped.localeCode}/${mapped.userId}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise instructions not found'
    );
    req.authenticate(false);
    return req.callAsJson(exerciseInstructionResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @param exerciseCode The exercise code of the instructions to update
   * @param localeCode   The locale code for the instructions to update
   * @param userId       The userId of the creator for the instructions to update
   * @return Response from the API call
   */
  async updateExerciseInstructions(
    body: ExerciseInstruction,
    exerciseCode: string,
    localeCode: string,
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseInstructionResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      body: [body, exerciseInstructionSchema],
      exerciseCode: [exerciseCode, string()],
      localeCode: [localeCode, string()],
      userId: [userId, string()],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/instructions/${mapped.localeCode}/${mapped.userId}`;
    req.throwOn(400, JustGainsErrorResponseError, 'Bad request');
    req.throwOn(401, JustGainsErrorResponseError, 'Unauthorized');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise instructions not found'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseInstructionResponseSchema, requestOptions);
  }

  /**
   * @param exerciseCode The exercise code of the instructions to delete
   * @param localeCode   The locale code for the instructions to delete
   * @param userId       The user ID of the instructions to delete
   * @return Response from the API call
   */
  async deleteExerciseInstructions(
    exerciseCode: string,
    localeCode: string,
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<JustGainsBasicResponse>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      exerciseCode: [exerciseCode, string()],
      localeCode: [localeCode, string()],
      userId: [userId, string()],
    });
    req.appendTemplatePath`/exercises/${mapped.exerciseCode}/instructions/${mapped.localeCode}/${mapped.userId}`;
    req.throwOn(401, JustGainsErrorResponseError, 'Unauthorized');
    req.throwOn(
      404,
      JustGainsErrorResponseError,
      'Exercise instructions not found'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(justGainsBasicResponseSchema, requestOptions);
  }
}
