/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ExerciseMetric, exerciseMetricSchema } from '../models/exerciseMetric';
import {
  ExerciseMetricsResponse,
  exerciseMetricsResponseSchema,
} from '../models/exerciseMetricsResponse';
import {
  ExerciseMetricsResponse1,
  exerciseMetricsResponse1Schema,
} from '../models/exerciseMetricsResponse1';
import {
  ExerciseMetricsResponse4,
  exerciseMetricsResponse4Schema,
} from '../models/exerciseMetricsResponse4';
import { optional, string } from '../schema';
import { BaseController } from './baseController';
import { ExerciseMetrics400Error } from '../errors/exerciseMetrics400Error';
import { ExerciseMetrics404Error } from '../errors/exerciseMetrics404Error';
import { ExerciseMetrics404Error3Error } from '../errors/exerciseMetrics404Error3Error';

export class ExerciseMetricsController extends BaseController {
  /**
   * @param localeCode The locale for the metric names and measurement data
   * @return Response from the API call
   */
  async getExerciseMetrics(
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseMetricsResponse>> {
    const req = this.createRequest('GET', '/exercise-metrics');
    const mapped = req.prepareArgs({
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.throwOn(400, ExerciseMetrics400Error, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(exerciseMetricsResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewExerciseMetric(
    body: ExerciseMetric,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseMetricsResponse1>> {
    const req = this.createRequest('POST', '/exercise-metrics');
    const mapped = req.prepareArgs({ body: [body, exerciseMetricSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ExerciseMetrics400Error, 'Bad request');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseMetricsResponse1Schema, requestOptions);
  }

  /**
   * @param metricCode
   * @param localeCode The locale for the metric name and measurement data
   * @return Response from the API call
   */
  async getExerciseMetric(
    metricCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseMetricsResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      metricCode: [metricCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/exercise-metrics/${mapped.metricCode}`;
    req.throwOn(404, ExerciseMetrics404Error, 'Exercise metric not found');
    req.authenticate(false);
    return req.callAsJson(exerciseMetricsResponse1Schema, requestOptions);
  }

  /**
   * @param metricCode
   * @param body
   * @return Response from the API call
   */
  async updateAnExerciseMetric(
    metricCode: string,
    body: ExerciseMetric,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseMetricsResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      metricCode: [metricCode, string()],
      body: [body, exerciseMetricSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/exercise-metrics/${mapped.metricCode}`;
    req.throwOn(400, ExerciseMetrics400Error, 'Bad request');
    req.throwOn(404, ExerciseMetrics404Error, 'Exercise metric not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseMetricsResponse1Schema, requestOptions);
  }

  /**
   * @param metricCode
   * @return Response from the API call
   */
  async deleteAnExerciseMetric(
    metricCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ExerciseMetricsResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ metricCode: [metricCode, string()] });
    req.appendTemplatePath`/exercise-metrics/${mapped.metricCode}`;
    req.throwOn(
      404,
      ExerciseMetrics404Error3Error,
      'Exercise metric deleted successfully'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(exerciseMetricsResponse4Schema, requestOptions);
  }
}
