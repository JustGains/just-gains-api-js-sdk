/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  PublishedStatus,
  publishedStatusSchema,
} from '../models/publishedStatus';
import {
  PublishedStatusResponse,
  publishedStatusResponseSchema,
} from '../models/publishedStatusResponse';
import {
  PublishedStatusResponse1,
  publishedStatusResponse1Schema,
} from '../models/publishedStatusResponse1';
import {
  PublishedStatusResponse4,
  publishedStatusResponse4Schema,
} from '../models/publishedStatusResponse4';
import {
  PublishedStatusTranslation,
  publishedStatusTranslationSchema,
} from '../models/publishedStatusTranslation';
import {
  PublishedStatusTranslationsResponse,
  publishedStatusTranslationsResponseSchema,
} from '../models/publishedStatusTranslationsResponse';
import {
  PublishedStatusTranslationsResponse1,
  publishedStatusTranslationsResponse1Schema,
} from '../models/publishedStatusTranslationsResponse1';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';
import { PublishedStatus400Error } from '../errors/publishedStatus400Error';
import { PublishedStatus404Error } from '../errors/publishedStatus404Error';
import { PublishedStatusTranslations400Error } from '../errors/publishedStatusTranslations400Error';
import { PublishedStatusTranslations401Error } from '../errors/publishedStatusTranslations401Error';
import { PublishedStatusTranslations404Error } from '../errors/publishedStatusTranslations404Error';
import { PublishedStatusTranslations422Error } from '../errors/publishedStatusTranslations422Error';

export class PublishedStatusController extends BaseController {
  /**
   * @param localeCode Locale code for translations (e.g., en-US)
   * @return Response from the API call
   */
  async getAllPublishedStatus(
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusResponse>> {
    const req = this.createRequest('GET', '/published-status');
    const mapped = req.prepareArgs({
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.throwOn(400, PublishedStatus400Error, 'Bad request');
    req.authenticate(false);
    return req.callAsJson(publishedStatusResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createANewPublishedStatus(
    body: PublishedStatus,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusResponse1>> {
    const req = this.createRequest('POST', '/published-status');
    const mapped = req.prepareArgs({ body: [body, publishedStatusSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, PublishedStatus400Error, 'Bad request');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(publishedStatusResponse1Schema, requestOptions);
  }

  /**
   * @param publishedStatusCode
   * @param localeCode          Locale code for translations (e.g., en-US)
   * @return Response from the API call
   */
  async getPublishedStatus(
    publishedStatusCode: string,
    localeCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      publishedStatusCode: [publishedStatusCode, string()],
      localeCode: [localeCode, optional(string())],
    });
    req.query('localeCode', mapped.localeCode);
    req.appendTemplatePath`/published-status/${mapped.publishedStatusCode}`;
    req.throwOn(404, PublishedStatus404Error, 'Published status not found');
    req.authenticate(false);
    return req.callAsJson(publishedStatusResponse1Schema, requestOptions);
  }

  /**
   * @param publishedStatusCode
   * @param body
   * @return Response from the API call
   */
  async updateAPublishedStatus(
    publishedStatusCode: string,
    body: PublishedStatus,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      publishedStatusCode: [publishedStatusCode, string()],
      body: [body, publishedStatusSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/published-status/${mapped.publishedStatusCode}`;
    req.throwOn(400, PublishedStatus400Error, 'Bad request');
    req.throwOn(404, PublishedStatus404Error, 'Published status not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(publishedStatusResponse1Schema, requestOptions);
  }

  /**
   * @param publishedStatusCode
   * @return Response from the API call
   */
  async deleteAPublishedStatus(
    publishedStatusCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusResponse4>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      publishedStatusCode: [publishedStatusCode, string()],
    });
    req.appendTemplatePath`/published-status/${mapped.publishedStatusCode}`;
    req.throwOn(404, PublishedStatus404Error, 'Published status not found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(publishedStatusResponse4Schema, requestOptions);
  }

  /**
   * @param publishedStatusCode The unique code of the published status
   * @return Response from the API call
   */
  async getAllPublishedStatusTranslations(
    publishedStatusCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusTranslationsResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      publishedStatusCode: [publishedStatusCode, string()],
    });
    req.appendTemplatePath`/published-status/${mapped.publishedStatusCode}/translations`;
    req.throwOn(400, PublishedStatusTranslations400Error, 'Bad request');
    req.throwOn(
      404,
      PublishedStatusTranslations404Error,
      'Published status not found'
    );
    req.authenticate(false);
    return req.callAsJson(
      publishedStatusTranslationsResponseSchema,
      requestOptions
    );
  }

  /**
   * @param publishedStatusCode The unique code of the published status
   * @param body
   * @return Response from the API call
   */
  async updatePublishedStatusTranslations(
    publishedStatusCode: string,
    body: PublishedStatusTranslation[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublishedStatusTranslationsResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      publishedStatusCode: [publishedStatusCode, string()],
      body: [body, array(publishedStatusTranslationSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/published-status/${mapped.publishedStatusCode}/translations`;
    req.throwOn(400, PublishedStatusTranslations400Error, 'Bad request');
    req.throwOn(401, PublishedStatusTranslations401Error, 'Unauthorized');
    req.throwOn(
      404,
      PublishedStatusTranslations404Error,
      'Published status not found'
    );
    req.throwOn(
      422,
      PublishedStatusTranslations422Error,
      'Unprocessable Entity'
    );
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(
      publishedStatusTranslationsResponse1Schema,
      requestOptions
    );
  }
}
