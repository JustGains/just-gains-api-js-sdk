/**
 * Workout Creator APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  nullable,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  EquipmentRequired,
  equipmentRequiredSchema,
} from './equipmentRequired';
import {
  ExerciseInstruction,
  exerciseInstructionSchema,
} from './exerciseInstruction';
import { ExerciseModelDTO, exerciseModelDTOSchema } from './exerciseModelDTO';
import {
  PublishStatusEnum,
  publishStatusEnumSchema,
} from './publishStatusEnum';
import { TargetMuscleDTO, targetMuscleDTOSchema } from './targetMuscleDTO';

export interface ExerciseDraftDTO {
  id?: number;
  fileName?: string;
  exerciseCode?: string;
  exerciseName?: string;
  alternateNames?: string[];
  publishStatus?: PublishStatusEnum;
  models?: ExerciseModelDTO[];
  exerciseType?: string[];
  exerciseMetrics?: string[];
  exerciseDifficulty?: number;
  metabolicEquivalent?: number;
  equipmentRequired?: EquipmentRequired;
  primaryMuscleGroups?: TargetMuscleDTO[];
  secondaryMuscleGroups?: TargetMuscleDTO[];
  isPlateloaded?: boolean;
  isCardio?: boolean;
  olympicRating?: number;
  powerlifterRating?: number;
  calisthenicRating?: number;
  popularityRating?: number;
  exerciseTechnicalComplexity?: number | null;
  isPlyometric?: boolean;
  isIsometric?: boolean;
  isCalisthenic?: boolean;
  isWeighted?: boolean;
  isUnilateral?: boolean;
  isBodyweight?: boolean;
  aiNotes?: string;
  exerciseInstructions?: ExerciseInstruction;
}

export const exerciseDraftDTOSchema: Schema<ExerciseDraftDTO> = object({
  id: ['id', optional(number())],
  fileName: ['file_name', optional(string())],
  exerciseCode: ['exercise_code', optional(string())],
  exerciseName: ['exercise_name', optional(string())],
  alternateNames: ['alternate_names', optional(array(string()))],
  publishStatus: ['publish_status', optional(publishStatusEnumSchema)],
  models: ['models', optional(array(lazy(() => exerciseModelDTOSchema)))],
  exerciseType: ['exercise_type', optional(array(string()))],
  exerciseMetrics: ['exercise_metrics', optional(array(string()))],
  exerciseDifficulty: ['exercise_difficulty', optional(number())],
  metabolicEquivalent: ['metabolic_equivalent', optional(number())],
  equipmentRequired: [
    'equipment_required',
    optional(lazy(() => equipmentRequiredSchema)),
  ],
  primaryMuscleGroups: [
    'primary_muscle_groups',
    optional(array(lazy(() => targetMuscleDTOSchema))),
  ],
  secondaryMuscleGroups: [
    'secondary_muscle_groups',
    optional(array(lazy(() => targetMuscleDTOSchema))),
  ],
  isPlateloaded: ['is_plateloaded', optional(boolean())],
  isCardio: ['is_cardio', optional(boolean())],
  olympicRating: ['olympic_rating', optional(number())],
  powerlifterRating: ['powerlifter_rating', optional(number())],
  calisthenicRating: ['calisthenic_rating', optional(number())],
  popularityRating: ['popularity_rating', optional(number())],
  exerciseTechnicalComplexity: [
    'exercise_technical_complexity',
    optional(nullable(number())),
  ],
  isPlyometric: ['is_plyometric', optional(boolean())],
  isIsometric: ['is_isometric', optional(boolean())],
  isCalisthenic: ['is_calisthenic', optional(boolean())],
  isWeighted: ['is_weighted', optional(boolean())],
  isUnilateral: ['is_unilateral', optional(boolean())],
  isBodyweight: ['is_bodyweight', optional(boolean())],
  aiNotes: ['ai_notes', optional(string())],
  exerciseInstructions: [
    'exercise_instructions',
    optional(lazy(() => exerciseInstructionSchema)),
  ],
});
